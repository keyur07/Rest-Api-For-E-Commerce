{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nfunction useOnClickOutside(ref, handler) {\n  _s();\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  },\n  // Add ref and handler to effect dependencies\n  // It's worth noting that because passed in handler is a new ...\n  // ... function on every render that will cause this effect ...\n  // ... callback/cleanup to run every render. It's not a big deal ...\n  // ... but to optimize you can wrap handler in useCallback before ...\n  // ... passing it into this hook.\n  [ref, handler]);\n}\n_s(useOnClickOutside, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nexport default useOnClickOutside;","map":{"version":3,"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["C:/xampp/htdocs/Assignment2/Assignment 2/online_shop/src/Components/useOnClickOutside/index.js"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nfunction useOnClickOutside(ref, handler) {\r\n  useEffect(\r\n    () => {\r\n      const listener = (event) => {\r\n        // Do nothing if clicking ref's element or descendent elements\r\n        if (!ref.current || ref.current.contains(event.target)) {\r\n          return;\r\n        }\r\n\r\n        handler(event);\r\n      };\r\n      document.addEventListener(\"mousedown\", listener);\r\n      document.addEventListener(\"touchstart\", listener);\r\n\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", listener);\r\n        document.removeEventListener(\"touchstart\", listener);\r\n      };\r\n    },\r\n    // Add ref and handler to effect dependencies\r\n    // It's worth noting that because passed in handler is a new ...\r\n    // ... function on every render that will cause this effect ...\r\n    // ... callback/cleanup to run every render. It's not a big deal ...\r\n    // ... but to optimize you can wrap handler in useCallback before ...\r\n    // ... passing it into this hook.\r\n    [ref, handler]\r\n  );\r\n}\r\n\r\nexport default useOnClickOutside;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,iBAAiB,CAACC,GAAG,EAAEC,OAAO,EAAE;EAAA;EACvCH,SAAS,CACP,MAAM;IACJ,MAAMI,QAAQ,GAAIC,KAAK,IAAK;MAC1B;MACA,IAAI,CAACH,GAAG,CAACI,OAAO,IAAIJ,GAAG,CAACI,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;QACtD;MACF;MAEAL,OAAO,CAACE,KAAK,CAAC;IAChB,CAAC;IACDI,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,QAAQ,CAAC;IAChDK,QAAQ,CAACC,gBAAgB,CAAC,YAAY,EAAEN,QAAQ,CAAC;IAEjD,OAAO,MAAM;MACXK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,QAAQ,CAAC;MACnDK,QAAQ,CAACE,mBAAmB,CAAC,YAAY,EAAEP,QAAQ,CAAC;IACtD,CAAC;EACH,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA,CAACF,GAAG,EAAEC,OAAO,CAAC,CACf;AACH;AAAC,GA3BQF,iBAAiB;AA6B1B,eAAeA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}